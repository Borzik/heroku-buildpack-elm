#!/bin/bash

set -eo pipefail

indent() {
  sed -u 's/^/       /'
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
buildpack=$(cd "$(dirname $0)/.." && pwd)

ELM_VERSION=${ELM_VERSION:-0.15}
SPAS_VERSION=${SPAS_VERSION:-0.1.0.0}
S3_URL=https://s3.amazonaws.com/heroku-buildpack-elm/assets

download() {
           url=$1
           basename=$2
           if test -f ${basename}
           then
            true
           else
            curl -sO ${url}/${basename}
           fi
}

mkdir -p ${cache}/bin
cd ${cache}/bin
echo "-----> Retrieving Elm ${ELM_VERSION} binaries"
download ${S3_URL}/elm/${ELM_VERSION} elm
download ${S3_URL}/elm/${ELM_VERSION} elm-package
download ${S3_URL}/elm/${ELM_VERSION} elm-make

if grep --quiet spas ${build}/Procfile 2> /dev/null; then
   echo "-----> Retrieving Spas ${SPAS_VERSION} binary"
   download ${S3_URL}/spas/${SPAS_VERSION} spas
   mkdir -p ${build}/bin
   cp spas ${build}/bin
else
   echo "-----> Retrieving Warp ${WARP_VERSION} binary"
   download ${S3_URL}/warp/${WARP_VERSION} warp
   mkdir -p ${build}/bin
   cp warp ${build}/bin
fi

chmod -R a+x ${cache}/bin ${build}/bin
PATH=${cache}/bin:$PATH

# Restore elm package cache
if test -d ${cache}/elm-stuff; then
   echo "-----> Restore Elm package cache"
   cp -r ${cache}/elm-stuff ${build}/elm-stuff
fi

cd ${build}
echo "-----> Installing Elm package dependencies"
# TODO cache these
elm package install --yes | indent
cp -r ${build}/elm-stuff ${cache}/
echo "-----> Compiling"
elm make --yes ${ELM_MAKE_ARGS} | indent

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/elm.sh